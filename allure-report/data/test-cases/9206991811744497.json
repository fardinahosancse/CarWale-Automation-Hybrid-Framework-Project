{"uid":"9206991811744497","name":"test_SelectCar[firefox-Tata-Tata Cars]","fullName":"test_Carwale.Test_CarWale#test_SelectCar","historyId":"afea011e820eda638719ff4c5149de92","time":{"start":1694591619939,"stop":1694591640302,"duration":20363},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[1]/ul[1]/a[1]/div[1]/div[1]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:188:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:506:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16","statusTrace":"self = <TestCases.test_Carwale.Test_CarWale object at 0x0000027B24E950A0>\ncarBrand = 'Tata', carTitle = 'Tata Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\",dataProvider.get_data(\"car\",\"../Excel/carwale.xlsx\"))\n    def test_SelectCar(self,carBrand,carTitle):\n        home = HomePage(self.driver)\n        car = CarBasePage(self.driver)\n        print(carBrand)\n        if carBrand == \"Maruti\":\n            home.go_to_new_car().goTo_maruti()\n            title=car.get_title()\n            print(\"Car Title is : \",title)\n            assert title == carTitle ,\"MisMatched\"\n            car.get_price_name()\n        elif carBrand == \"Hyundai\":\n            home.go_to_new_car().goTo_hynudai()\n            title = car.get_title()\n            print(\"Car Title is : \", title)\n            assert title == carTitle, \"MisMatched\"\n            car.get_price_name()\n        elif carBrand == \"Tata\":\n>           home.go_to_new_car().goTo_tata()\n\ntest_Carwale.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\HomePage.py:16: in go_to_new_car\n    self.click(\"find_new_car_xpath\")\n..\\Pages\\BasePage.py:19: in click\n    self.driver.find_element(By.XPATH,conf.readConfig(\"locatorsData\",syntex)).click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027B24F66D30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: //div[1]/ul[1]/a[1].../content/shared/webdriver/Errors.sys.mjs:506:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[1]/ul[1]/a[1]/div[1]/div[1]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:188:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:506:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_browser","time":{"start":1694591608555,"stop":1694591619939,"duration":11384},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"log_on_failure","time":{"start":1694591619939,"stop":1694591619939,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[1]/ul[1]/a[1]/div[1]/div[1]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:188:5\nNoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:506:5\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16","statusTrace":"self = <TestCases.test_Carwale.Test_CarWale object at 0x0000027B24E950A0>\ncarBrand = 'Tata', carTitle = 'Tata Cars'\n\n    @pytest.mark.parametrize(\"carBrand,carTitle\",dataProvider.get_data(\"car\",\"../Excel/carwale.xlsx\"))\n    def test_SelectCar(self,carBrand,carTitle):\n        home = HomePage(self.driver)\n        car = CarBasePage(self.driver)\n        print(carBrand)\n        if carBrand == \"Maruti\":\n            home.go_to_new_car().goTo_maruti()\n            title=car.get_title()\n            print(\"Car Title is : \",title)\n            assert title == carTitle ,\"MisMatched\"\n            car.get_price_name()\n        elif carBrand == \"Hyundai\":\n            home.go_to_new_car().goTo_hynudai()\n            title = car.get_title()\n            print(\"Car Title is : \", title)\n            assert title == carTitle, \"MisMatched\"\n            car.get_price_name()\n        elif carBrand == \"Tata\":\n>           home.go_to_new_car().goTo_tata()\n\ntest_Carwale.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\HomePage.py:16: in go_to_new_car\n    self.click(\"find_new_car_xpath\")\n..\\Pages\\BasePage.py:19: in click\n    self.driver.find_element(By.XPATH,conf.readConfig(\"locatorsData\",syntex)).click()\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027B24F66D30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"Unable to locate element: //div[1]/ul[1]/a[1].../content/shared/webdriver/Errors.sys.mjs:506:5\\\\ndom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: //div[1]/ul[1]/a[1]/div[1]/div[1]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:188:5\nE       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:506:5\nE       dom.find/</<@chrome://remote/content/shared/DOM.sys.mjs:132:16\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException","steps":[],"attachments":[{"uid":"9ee932ff35b2242e","name":"log","source":"9ee932ff35b2242e.txt","type":"text/plain","size":67}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"log_on_failure::0","time":{"start":1694591640506,"stop":1694591640647,"duration":141},"status":"passed","steps":[],"attachments":[{"uid":"72636065ffefcf94","name":"miao","source":"72636065ffefcf94.png","type":"image/png","size":1394206}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":1},{"name":"get_browser::0","time":{"start":1694591640647,"stop":1694591643371,"duration":2724},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('log_on_failure', 'get_browser')"},{"name":"suite","value":"test_Carwale"},{"name":"subSuite","value":"Test_CarWale"},{"name":"host","value":"CYREX-x-CYREX"},{"name":"thread","value":"2820-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_Carwale"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"carBrand","value":"'Tata'"},{"name":"carTitle","value":"'Tata Cars'"},{"name":"get_browser","value":"'firefox'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('log_on_failure', 'get_browser')"]},"source":"9206991811744497.json","parameterValues":["'Tata'","'Tata Cars'","'firefox'"]}